package org.example;

import java.util.ArrayList;
import java.util.Collections;

public class BucketSort {
  public void bucketSort(float[] arr, int n) {
    if (n <= 0)
      return;
    @SuppressWarnings("unchecked")
    ArrayList<Float>[] bucket = new ArrayList[n];

    // Create empty buckets
    for (int i = 0; i < n; i++)
      bucket[i] = new ArrayList<Float>();

    // Add elements into the buckets
    for (int i = 0; i < n; i++) {
      int bucketIndex = (int) arr[i] * n;
      bucket[bucketIndex].add(arr[i]);
    }

    // Sort the elements of each bucket
    for (int i = 0; i < n; i++) {
      Collections.sort((bucket[i]));
    }

    // Get the sorted array
    int index = 0;
    for (int i = 0; i < n; i++) {
      for (int j = 0, size = bucket[i].size(); j < size; j++) {
        arr[index++] = bucket[i].get(j);
      }
    }
  }

  // Generate evenly distributed floats
  // Create arrays of floats where each element is generated by dividing the index
  // by the size of the array, ensuring a uniform distribution
  public static float[] generateEvenlyDistributedArray(int size) {
    float[] arr = new float[size];
    for (int i = 0; i < size; i++) {
      arr[i] = (float) i / size;
    }
    return arr;
  }

  // Generate random floats
  // Generate arrays of floats using the Math.random() method,
  // resulting in random float values between 0 and 1
  public static float[] generateUnevenlyDistributedArray(int size) {
    float[] arr = new float[size];
    for (int i = 0; i < size; i++) {
      arr[i] = (float) Math.random();
    }
    return arr;
  }

  // Driver code
  public static void main(String[] args) {
    BucketSort b = new BucketSort();

    // Test case 1.1: Evenly distributed numbers
    float[] evenlyDistributedArray = generateEvenlyDistributedArray(100);
    long startTime = System.nanoTime();
    b.bucketSort(evenlyDistributedArray, 100);
    long endTime = System.nanoTime();
    long elapsedTimeEvenlyDistributed = endTime - startTime; // Record the runtime of the BucketSort using System.nanoTime()
    System.out.println("1.1 Runtime for evenly distributed numbers with size " + 100 + ": " + elapsedTimeEvenlyDistributed + " nanoseconds");

    // Test case 1.2: Evenly distributed numbers
    float[] evenlyDistributedArray1 = generateEvenlyDistributedArray(1000);
    long startTime1 = System.nanoTime();
    b.bucketSort(evenlyDistributedArray1, 1000);
    long endTime1 = System.nanoTime();
    long elapsedTimeEvenlyDistributed1 = endTime1 - startTime1;
    System.out.println("1.2 Runtime for evenly distributed numbers with size " + 1000 + ": " + elapsedTimeEvenlyDistributed1 + " nanoseconds");

    // Test case 1.3: Evenly distributed numbers
    float[] evenlyDistributedArray2 = generateEvenlyDistributedArray(5000);
    long startTime2 = System.nanoTime();
    b.bucketSort(evenlyDistributedArray2, 5000);
    long endTime2 = System.nanoTime();
    long elapsedTimeEvenlyDistributed2 = endTime2 - startTime2;
    System.out.println("1.3 Runtime for evenly distributed numbers with size " + 5000 + ": " + elapsedTimeEvenlyDistributed2 + " nanoseconds \n");


    // Test case 2.1: Unevenly distributed numbers
    float[] unevenlyDistributedArray = generateUnevenlyDistributedArray(100);
    long startTime3 = System.nanoTime();
    b.bucketSort(unevenlyDistributedArray, 100);
    long endTime3 = System.nanoTime();
    long elapsedTimeUnevenlyDistributed3 = endTime3 - startTime3;
    System.out.println("2.1 Runtime for unevenly distributed numbers with size " + 100 + ": " + elapsedTimeUnevenlyDistributed3 + " nanoseconds");

    // Test case 2.2: Unevenly distributed numbers
    float[] unevenlyDistributedArray4 = generateUnevenlyDistributedArray(1000);
    long startTime4 = System.nanoTime();
    b.bucketSort(unevenlyDistributedArray4, 1000);
    long endTime4 = System.nanoTime();
    long elapsedTimeUnevenlyDistributed4 = endTime4 - startTime4;
    System.out.println("2.2 Runtime for unevenly distributed numbers with size " + 1000 + ": " + elapsedTimeUnevenlyDistributed4 + " nanoseconds");

    // Test case 2.3: Unevenly distributed numbers
    float[] unevenlyDistributedArray5 = generateUnevenlyDistributedArray(5000);
    long startTime5 = System.nanoTime();
    b.bucketSort(unevenlyDistributedArray5, 5000);
    long endTime5 = System.nanoTime();
    long elapsedTimeUnevenlyDistributed5 = endTime5 - startTime5;
    System.out.println("2.3 Runtime for unevenly distributed numbers with size " + 5000 + ": " + elapsedTimeUnevenlyDistributed5 + " nanoseconds");

    /*
    The runtime of the algorithm is influenced by the size of the input array.
    The distribution also affects the runtime, with unevenly distributed numbers resulting in more variability.
     */
  }
}